# name: Create Core Resources

# on:
#   workflow_dispatch:
#     inputs:
#       stateResourceGroupName:
#         description: 'The name of the resource group that will contain the terraform state'
#         required: true
#         type: string        
#         default: 'rg-tf-state'
#       storageAccountName:
#         description: 'The name of the storage account'
#         required: true
#         type: string
#         default: 'strtfstatehg28'       
#       containerName:
#         description: 'The name of the container that will have the state'
#         required: true
#         type: string
#         default: 'coretfstate'        
#       deployAdmin:
#         description: 'Indicate if we deploy Azure API Management in a shared service landing zone'
#         required: true
#         type: boolean
#         default: false                  

# jobs:
#   create-core-resources:
#     env:
#       REGION: ${{ secrets.LOCATION }} # You can change this to reflect the region where you deploy your Accelerator
#       AZURE_CORE_OUTPUT: "none"

#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v4

#       - name: Azure Login
#         uses: Azure/login@v2
#         with:
#           creds: ${{ secrets.SP_FOUNDRY }}
          
#       - uses: hashicorp/setup-terraform@v3
      
#       - name: create terraform state              
#         run: |
#           if ! az group exists -n ${{ inputs.stateResourceGroupName }} || true; then
#             az group create -n ${{ inputs.stateResourceGroupName }} -l ${{ secrets.LOCATION }}          
#             az storage account create --name ${{ inputs.storageAccountName }} --resource-group ${{ inputs.stateResourceGroupName }} --location ${{ secrets.LOCATION }} --sku Standard_LRS --kind StorageV2
#             az storage container create --name ${{ inputs.containerName }} --account-name ${{ inputs.storageAccountName }} --account-key $(az storage account keys list --resource-group ${{ inputs.stateResourceGroupName }} --account-name ${{ inputs.storageAccountName }} --query "[0].value" -o tsv)
#             az role assignment create --assignee ${{ secrets.SP_FOUNDRY_APP_ID }} --role "Storage Blob Data Contributor" --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION }}/resourceGroups/${{ inputs.stateResourceGroupName }}/providers/Microsoft.Storage/storageAccounts/${{ inputs.storageAccountName }}
#             sleep 120          
#           fi          
#           az storage account update --name ${{ inputs.storageAccountName }} --resource-group ${{ inputs.stateResourceGroupName }} --public-network-access Enabled --default-action Allow
          
#       - uses: gliech/create-github-secret-action@v1
#         with:
#           name: TERRAFORM_STORAGE_NAME
#           value: ${{ inputs.storageAccountName }}
#           pa_token: ${{ secrets.PA_TOKEN }}
          
#       - uses: gliech/create-github-secret-action@v1
#         with:
#           name: TERRAFORM_STORAGE_RESOURCE_GROUP
#           value: ${{ inputs.stateResourceGroupName }}
#           pa_token: ${{ secrets.PA_TOKEN }}

#       - uses: cschleiden/replace-tokens@v1
#         name: Update variables.tf
#         with:
#             tokenPrefix: '__'
#             tokenSuffix: '__'            
#             files: '["infra/createCoreResources/variables.tf"]'
#         env:
#             subscription_id_resources: ${{ secrets.AZURE_SUBSCRIPTION }}
#             location: ${{ secrets.LOCATION }}
#             resource_group_name_vnet: ${{ secrets.VNET_RESOURCE_GROUP_NAME }}
#             resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
#             subnet_agent_address_prefix: ${{ secrets.SUBNET_AGENT_ADDRESS_PREFIX }}
#             subnet_jumpbox_address_prefix: ${{ secrets.JUMPBOX_SUBNET_ADDRESS_PREFIX }}
#             subnet_private_endpoint_address_prefix: ${{ secrets.SUBNET_PRIVATE_ENDPOINT_ADDRESS_PREFIX }}
#             vnet_address_prefix: ${{ secrets.VNET_ADDRESS_PREFIX }}
#             admin_password: ${{ secrets.VM_PASSWORD }}
#             admin_username: ${{ secrets.VM_ADMIN }}
#             deploy_apim: ${{ inputs.deployAdmin }}

#       - uses: cschleiden/replace-tokens@v1
#         name: Update versions.tf
#         with:
#             tokenPrefix: '__'
#             tokenSuffix: '__'            
#             files: '["infra/createCoreResources/versions.tf"]'
#         env:
#             resourceGroupName: ${{ inputs.stateResourceGroupName }}            
#             storageAccountName: ${{ inputs.storageAccountName }}
#             containerName: ${{ inputs.containerName }}
#             tenantID: ${{ secrets.AZURE_TENANT_ID }}
#             subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION }}

#       - run: terraform init
#         name: Terraform init
#         working-directory: infra/createCoreResources

#       - run: terraform plan
#         name: Terraform plan
#         working-directory: infra/createCoreResources
        
#       - name: Terraform Apply
#         run: terraform apply -auto-approve         
#         working-directory: infra/createCoreResources        