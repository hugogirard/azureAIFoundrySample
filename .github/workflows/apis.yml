name: Build and Deploy Flight API

on:
  workflow_dispatch:

env:
  REGISTRY_NAME: your-acr-name  # Replace with your ACR name
  IMAGE_NAME: flight-api
  AZURE_RESOURCE_GROUP: your-resource-group  # Replace with your resource group

jobs:
  seed-tables:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('src/apis/flight-api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./src/apis/flight-api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Seed database tables
      working-directory: ./src/apis/flight-api
      env:        
        AZURE_STORAGE_ENDPOINT: ${{ secrets.STORAGE_TABLE_ENDPOINT }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        DELETE_TABLE: "true"  # Set to false if you don't want to delete existing tables
      run: |
        python seed.py



  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY_NAME }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/apis/flight-api
        file: ./src/apis/flight-api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Update image tag in deployment files (optional)
      run: |
        # If you have Kubernetes manifests or other deployment files
        # that need to be updated with the new image tag, add those commands here
        echo "Image built and pushed successfully"
        echo "Tags: ${{ steps.meta.outputs.tags }}"

  deploy-to-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances (Staging)
      run: |
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name flight-api-staging \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} \
          --cpu 1 \
          --memory 1.5 \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ env.REGISTRY_NAME }} \
          --registry-password $(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "passwords[0].value" -o tsv) \
          --dns-name-label flight-api-staging-${{ github.run_number }} \
          --ports 8000 \
          --environment-variables ENVIRONMENT=staging

  deploy-to-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances (Production)
      run: |
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name flight-api-production \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
          --cpu 2 \
          --memory 3.5 \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ env.REGISTRY_NAME }} \
          --registry-password $(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "passwords[0].value" -o tsv) \
          --dns-name-label flight-api-prod-${{ github.run_number }} \
          --ports 8000 \
          --environment-variables ENVIRONMENT=production

    - name: Run health check
      run: |
        sleep 30  # Wait for container to start
        FQDN=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name flight-api-production --query "ipAddress.fqdn" -o tsv)
        curl -f http://$FQDN:8000/health || exit 1